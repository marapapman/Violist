public class twitter4j.TwitterAPIMonitor extends java.lang.Object
{
    private static final twitter4j.TwitterAPIMonitor SINGLETON;
    private static final twitter4j.management.APIStatistics STATISTICS;
    private static final twitter4j.internal.logging.Logger logger;
    private static final java.util.regex.Pattern pattern;

    static void <clinit>()
    {
        javax.management.InstanceAlreadyExistsException $r0;
        java.lang.SecurityException $r1;
        boolean $z0, $z1;
        javax.management.ObjectName $r2;
        twitter4j.management.APIStatisticsOpenMBean $r3;
        twitter4j.internal.logging.Logger $r4;
        java.util.regex.Pattern $r5;
        twitter4j.TwitterAPIMonitor $r6;
        twitter4j.management.APIStatistics $r7;
        java.lang.String $r8;
        double $d0;
        byte $b0;
        twitter4j.conf.Configuration $r9;
        javax.management.MBeanServer $r10;
        javax.management.MBeanRegistrationException $r11;
        javax.management.NotCompliantMBeanException $r12;
        javax.management.MalformedObjectNameException $r13;

        $r4 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.Logger getLogger(java.lang.Class)>(class "twitter4j/TwitterAPIMonitor");

        <twitter4j.TwitterAPIMonitor: twitter4j.internal.logging.Logger logger> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("https?:\\/\\/[^\\/]+\\/[0-9.]*\\/([a-zA-Z_\\.]*).*");

        <twitter4j.TwitterAPIMonitor: java.util.regex.Pattern pattern> = $r5;

        $r6 = new twitter4j.TwitterAPIMonitor;

        specialinvoke $r6.<twitter4j.TwitterAPIMonitor: void <init>()>();

        <twitter4j.TwitterAPIMonitor: twitter4j.TwitterAPIMonitor SINGLETON> = $r6;

        $r7 = new twitter4j.management.APIStatistics;

        specialinvoke $r7.<twitter4j.management.APIStatistics: void <init>(int)>(100);

        <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS> = $r7;

        $z0 = 0;

     label01:
        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");

        if $r8 == null goto label04;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

     label02:
        $b0 = 1.5 cmpl $d0;

        if $b0 <= 0 goto label09;

     label03:
        $z0 = 1;

     label04:
        $r9 = staticinvoke <twitter4j.conf.ConfigurationContext: twitter4j.conf.Configuration getInstance()>();

        $z1 = interfaceinvoke $r9.<twitter4j.conf.Configuration: boolean isDalvik()>();

        if $z1 == 0 goto label05;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("http.keepAlive", "false");

     label05:
        $r10 = staticinvoke <java.lang.management.ManagementFactory: javax.management.MBeanServer getPlatformMBeanServer()>();

     label06:
        if $z0 == 0 goto label12;

     label07:
        $r2 = new javax.management.ObjectName;

        specialinvoke $r2.<javax.management.ObjectName: void <init>(java.lang.String)>("twitter4j.mbean:type=APIStatistics");

        $r7 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

        interfaceinvoke $r10.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r7, $r2);

     label08:
        return;

     label09:
        $z0 = 0;

        goto label04;

     label10:
        $r1 := @caughtexception;

        $z0 = 1;

     label11:
        goto label05;

     label12:
        $r2 = new javax.management.ObjectName;

        specialinvoke $r2.<javax.management.ObjectName: void <init>(java.lang.String)>("twitter4j.mbean:type=APIStatisticsOpenMBean");

     label13:
        $r3 = new twitter4j.management.APIStatisticsOpenMBean;

     label14:
        $r7 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

        specialinvoke $r3.<twitter4j.management.APIStatisticsOpenMBean: void <init>(twitter4j.management.APIStatistics)>($r7);

        interfaceinvoke $r10.<javax.management.MBeanServer: javax.management.ObjectInstance registerMBean(java.lang.Object,javax.management.ObjectName)>($r3, $r2);

     label15:
        return;

     label16:
        $r0 := @caughtexception;

        virtualinvoke $r0.<javax.management.InstanceAlreadyExistsException: void printStackTrace()>();

        $r4 = <twitter4j.TwitterAPIMonitor: twitter4j.internal.logging.Logger logger>;

        $r8 = virtualinvoke $r0.<javax.management.InstanceAlreadyExistsException: java.lang.String getMessage()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void error(java.lang.String)>($r8);

        return;

     label17:
        $r11 := @caughtexception;

        virtualinvoke $r11.<javax.management.MBeanRegistrationException: void printStackTrace()>();

        $r4 = <twitter4j.TwitterAPIMonitor: twitter4j.internal.logging.Logger logger>;

        $r8 = virtualinvoke $r11.<javax.management.MBeanRegistrationException: java.lang.String getMessage()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void error(java.lang.String)>($r8);

        return;

     label18:
        $r12 := @caughtexception;

        virtualinvoke $r12.<javax.management.NotCompliantMBeanException: void printStackTrace()>();

        $r4 = <twitter4j.TwitterAPIMonitor: twitter4j.internal.logging.Logger logger>;

        $r8 = virtualinvoke $r12.<javax.management.NotCompliantMBeanException: java.lang.String getMessage()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void error(java.lang.String)>($r8);

        return;

     label19:
        $r13 := @caughtexception;

        virtualinvoke $r13.<javax.management.MalformedObjectNameException: void printStackTrace()>();

        $r4 = <twitter4j.TwitterAPIMonitor: twitter4j.internal.logging.Logger logger>;

        $r8 = virtualinvoke $r13.<javax.management.MalformedObjectNameException: java.lang.String getMessage()>();

        virtualinvoke $r4.<twitter4j.internal.logging.Logger: void error(java.lang.String)>($r8);

        return;

        catch java.lang.SecurityException from label01 to label02 with label10;
        catch java.lang.SecurityException from label03 to label05 with label10;
        catch javax.management.InstanceAlreadyExistsException from label05 to label06 with label16;
        catch javax.management.InstanceAlreadyExistsException from label07 to label08 with label16;
        catch javax.management.InstanceAlreadyExistsException from label11 to label13 with label16;
        catch javax.management.InstanceAlreadyExistsException from label14 to label15 with label16;
        catch javax.management.MBeanRegistrationException from label05 to label06 with label17;
        catch javax.management.MBeanRegistrationException from label07 to label08 with label17;
        catch javax.management.MBeanRegistrationException from label11 to label13 with label17;
        catch javax.management.MBeanRegistrationException from label14 to label15 with label17;
        catch javax.management.NotCompliantMBeanException from label05 to label06 with label18;
        catch javax.management.NotCompliantMBeanException from label07 to label08 with label18;
        catch javax.management.NotCompliantMBeanException from label11 to label13 with label18;
        catch javax.management.NotCompliantMBeanException from label14 to label15 with label18;
        catch javax.management.MalformedObjectNameException from label05 to label06 with label19;
        catch javax.management.MalformedObjectNameException from label07 to label08 with label19;
        catch javax.management.MalformedObjectNameException from label11 to label13 with label19;
        catch javax.management.MalformedObjectNameException from label14 to label15 with label19;
    }

    private void <init>()
    {
        twitter4j.TwitterAPIMonitor $r0;

        $r0 := @this: twitter4j.TwitterAPIMonitor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static twitter4j.TwitterAPIMonitor getInstance()
    {
        twitter4j.TwitterAPIMonitor r0;

        r0 = <twitter4j.TwitterAPIMonitor: twitter4j.TwitterAPIMonitor SINGLETON>;

        return r0;
    }

    public twitter4j.management.APIStatisticsMBean getStatistics()
    {
        twitter4j.TwitterAPIMonitor $r0;
        twitter4j.management.APIStatistics r1;

        $r0 := @this: twitter4j.TwitterAPIMonitor;

        r1 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

        return r1;
    }

    void methodCalled(java.lang.String, long, boolean)
    {
        twitter4j.TwitterAPIMonitor $r0;
        java.lang.String $r1;
        long $l0;
        boolean $z0, $z1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        int $i1;
        twitter4j.management.APIStatistics $r4;

        $r0 := @this: twitter4j.TwitterAPIMonitor;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $z0 := @parameter2: boolean;

        $r2 = <twitter4j.TwitterAPIMonitor: java.util.regex.Pattern pattern>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z1 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke $r3.<java.util.regex.Matcher: int groupCount()>();

        if $i1 <= 0 goto label2;

        $r1 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = <twitter4j.TwitterAPIMonitor: twitter4j.management.APIStatistics STATISTICS>;

        virtualinvoke $r4.<twitter4j.management.APIStatistics: void methodCalled(java.lang.String,long,boolean)>($r1, $l0, $z0);

        return;

     label1:
        return;

     label2:
        return;
    }
}
