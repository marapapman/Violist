class com.nostra13.universalimageloader.core.ImageDecoder extends java.lang.Object
{
    private static final java.lang.String LOG_IMAGE_SCALED;
    private static final java.lang.String LOG_IMAGE_SUBSAMPLED;
    private final com.nostra13.universalimageloader.core.DisplayImageOptions displayOptions;
    private final com.nostra13.universalimageloader.core.download.ImageDownloader imageDownloader;
    private final java.net.URI imageUri;
    private boolean loggingEnabled;

    void <init>(java.net.URI, com.nostra13.universalimageloader.core.download.ImageDownloader, com.nostra13.universalimageloader.core.DisplayImageOptions)
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        java.net.URI $r1;
        com.nostra13.universalimageloader.core.download.ImageDownloader $r2;
        com.nostra13.universalimageloader.core.DisplayImageOptions $r3;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $r1 := @parameter0: java.net.URI;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.download.ImageDownloader;

        $r3 := @parameter2: com.nostra13.universalimageloader.core.DisplayImageOptions;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.nostra13.universalimageloader.core.ImageDecoder: java.net.URI imageUri> = $r1;

        $r0.<com.nostra13.universalimageloader.core.ImageDecoder: com.nostra13.universalimageloader.core.download.ImageDownloader imageDownloader> = $r2;

        $r0.<com.nostra13.universalimageloader.core.ImageDecoder: com.nostra13.universalimageloader.core.DisplayImageOptions displayOptions> = $r3;

        return;
    }

    private int computeImageScale(com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.assist.ImageScaleType, com.nostra13.universalimageloader.core.assist.ViewScaleType) throws java.io.IOException
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r1;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r2, $r9;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r3, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.BitmapFactory$Options $r4;
        java.net.URI $r5;
        com.nostra13.universalimageloader.core.download.ImageDownloader $r6;
        java.io.InputStream $r7;
        java.lang.Throwable $r10;
        boolean $z0;
        java.lang.Object[] $r11;
        java.lang.Integer $r12;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.assist.ImageSize;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.assist.ImageScaleType;

        $r3 := @parameter2: com.nostra13.universalimageloader.core.assist.ViewScaleType;

        $i5 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.assist.ImageSize: int getWidth()>();

        $i6 = virtualinvoke $r1.<com.nostra13.universalimageloader.core.assist.ImageSize: int getHeight()>();

        $r4 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r4.<android.graphics.BitmapFactory$Options: void <init>()>();

        $r4.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        $r6 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: com.nostra13.universalimageloader.core.download.ImageDownloader imageDownloader>;

        $r5 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: java.net.URI imageUri>;

        $r7 = virtualinvoke $r6.<com.nostra13.universalimageloader.core.download.ImageDownloader: java.io.InputStream getStream(java.net.URI)>($r5);

     label01:
        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r7, null, $r4);

     label02:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

        $i3 = 1;

        $i2 = $r4.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i1 = $r4.<android.graphics.BitmapFactory$Options: int outHeight>;

        $i4 = $i2 / $i5;

        $i0 = $i1 / $i6;

        $r8 = <com.nostra13.universalimageloader.core.assist.ViewScaleType: com.nostra13.universalimageloader.core.assist.ViewScaleType FIT_INSIDE>;

        if $r3 != $r8 goto label09;

        $r9 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType IN_SAMPLE_POWER_OF_2>;

        if $r2 == $r9 goto label03;

        $r9 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType POWER_OF_2>;

        if $r2 != $r9 goto label06;

     label03:
        $i4 = $i2 / 2;

        if $i4 >= $i5 goto label04;

        $i4 = $i1 / 2;

        if $i4 < $i6 goto label07;

     label04:
        $i2 = $i2 / 2;

        $i1 = $i1 / 2;

        $i3 = $i3 * 2;

        goto label03;

     label05:
        $r10 := @caughtexception;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        throw $r10;

     label06:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i0);

     label07:
        if $i3 >= 1 goto label08;

        $i3 = 1;

     label08:
        $z0 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: boolean loggingEnabled>;

        if $z0 == 0 goto label12;

        $r11 = newarray (java.lang.Object)[5];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11[0] = $r12;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r11[1] = $r12;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r11[2] = $r12;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r11[3] = $r12;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r11[4] = $r12;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void d(java.lang.String,java.lang.Object[])>("Original image (%1$dx%2$d) is going to be subsampled to %3$dx%4$d view. Computed scale size - %5$d", $r11);

        return $i3;

     label09:
        $r9 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType IN_SAMPLE_POWER_OF_2>;

        if $r2 == $r9 goto label10;

        $r9 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType POWER_OF_2>;

        if $r2 != $r9 goto label11;

     label10:
        $i4 = $i2 / 2;

        if $i4 < $i5 goto label07;

        $i4 = $i1 / 2;

        if $i4 < $i6 goto label07;

        $i2 = $i2 / 2;

        $i1 = $i1 / 2;

        $i3 = $i3 * 2;

        goto label10;

     label11:
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i0);

        goto label07;

     label12:
        return $i3;

        catch java.lang.Throwable from label01 to label02 with label05;
    }

    private android.graphics.BitmapFactory$Options getBitmapOptionsForImageDecoding(com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.assist.ImageScaleType, com.nostra13.universalimageloader.core.assist.ViewScaleType) throws java.io.IOException
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r1;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r2;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r3;
        android.graphics.BitmapFactory$Options $r4;
        int $i0;
        com.nostra13.universalimageloader.core.DisplayImageOptions $r5;
        android.graphics.Bitmap$Config $r6;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.assist.ImageSize;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.assist.ImageScaleType;

        $r3 := @parameter2: com.nostra13.universalimageloader.core.assist.ViewScaleType;

        $r4 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r4.<android.graphics.BitmapFactory$Options: void <init>()>();

        $i0 = specialinvoke $r0.<com.nostra13.universalimageloader.core.ImageDecoder: int computeImageScale(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageScaleType,com.nostra13.universalimageloader.core.assist.ViewScaleType)>($r1, $r2, $r3);

        $r4.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i0;

        $r5 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: com.nostra13.universalimageloader.core.DisplayImageOptions displayOptions>;

        $r6 = virtualinvoke $r5.<com.nostra13.universalimageloader.core.DisplayImageOptions: android.graphics.Bitmap$Config getBitmapConfig()>();

        $r4.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r6;

        return $r4;
    }

    private android.graphics.Bitmap scaleImageExactly(android.graphics.Bitmap, com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.assist.ImageScaleType, com.nostra13.universalimageloader.core.assist.ViewScaleType)
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        android.graphics.Bitmap $r1, $r7;
        com.nostra13.universalimageloader.core.assist.ImageSize $r2;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r3, $r6;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r4, $r5;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3;
        byte $b3;
        boolean $z0;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.assist.ImageSize;

        $r3 := @parameter2: com.nostra13.universalimageloader.core.assist.ImageScaleType;

        $r4 := @parameter3: com.nostra13.universalimageloader.core.assist.ViewScaleType;

        $i2 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        $f2 = (float) $i2;

        $i2 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        $f1 = (float) $i2;

        $i2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.assist.ImageSize: int getWidth()>();

        $f3 = (float) $i2;

        $f3 = $f2 / $f3;

        $i2 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.assist.ImageSize: int getHeight()>();

        $f0 = (float) $i2;

        $f0 = $f1 / $f0;

        $r5 = <com.nostra13.universalimageloader.core.assist.ViewScaleType: com.nostra13.universalimageloader.core.assist.ViewScaleType FIT_INSIDE>;

        if $r4 != $r5 goto label1;

        $b3 = $f3 cmpl $f0;

        if $b3 >= 0 goto label2;

     label1:
        $r5 = <com.nostra13.universalimageloader.core.assist.ViewScaleType: com.nostra13.universalimageloader.core.assist.ViewScaleType CROP>;

        if $r4 != $r5 goto label7;

        $b3 = $f3 cmpg $f0;

        if $b3 >= 0 goto label7;

     label2:
        $i1 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.assist.ImageSize: int getWidth()>();

        $f3 = $f1 / $f3;

        $i0 = (int) $f3;

     label3:
        $r6 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY>;

        if $r3 != $r6 goto label4;

        $f3 = (float) $i1;

        $b3 = $f3 cmpg $f2;

        if $b3 >= 0 goto label4;

        $f3 = (float) $i0;

        $b3 = $f3 cmpg $f1;

        if $b3 < 0 goto label5;

     label4:
        $r6 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY_STRETCHED>;

        if $r3 != $r6 goto label8;

        $f3 = (float) $i1;

        $b3 = $f3 cmpl $f2;

        if $b3 == 0 goto label8;

        $f3 = (float) $i0;

        $b3 = $f3 cmpl $f1;

        if $b3 == 0 goto label8;

     label5:
        $r7 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r1, $i1, $i0, 1);

        if $r7 == $r1 goto label6;

        virtualinvoke $r1.<android.graphics.Bitmap: void recycle()>();

     label6:
        $z0 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: boolean loggingEnabled>;

        if $z0 == 0 goto label9;

        $r8 = newarray (java.lang.Object)[4];

        $i2 = (int) $f2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[0] = $r9;

        $i2 = (int) $f1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[1] = $r9;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8[2] = $r9;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[3] = $r9;

        staticinvoke <com.nostra13.universalimageloader.utils.L: void d(java.lang.String,java.lang.Object[])>("Subsampled image (%1$dx%2$d) was scaled to %3$dx%4$d", $r8);

        return $r7;

     label7:
        $f3 = $f2 / $f0;

        $i1 = (int) $f3;

        $i0 = virtualinvoke $r2.<com.nostra13.universalimageloader.core.assist.ImageSize: int getHeight()>();

        goto label3;

     label8:
        return $r1;

     label9:
        return $r7;
    }

    public android.graphics.Bitmap decode(com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.assist.ImageScaleType) throws java.io.IOException
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r1;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r2;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r3;
        android.graphics.Bitmap $r4;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.assist.ImageSize;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.assist.ImageScaleType;

        $r3 = <com.nostra13.universalimageloader.core.assist.ViewScaleType: com.nostra13.universalimageloader.core.assist.ViewScaleType FIT_INSIDE>;

        $r4 = virtualinvoke $r0.<com.nostra13.universalimageloader.core.ImageDecoder: android.graphics.Bitmap decode(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageScaleType,com.nostra13.universalimageloader.core.assist.ViewScaleType)>($r1, $r2, $r3);

        return $r4;
    }

    public android.graphics.Bitmap decode(com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.assist.ImageScaleType, com.nostra13.universalimageloader.core.assist.ViewScaleType) throws java.io.IOException
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        com.nostra13.universalimageloader.core.assist.ImageSize $r1;
        com.nostra13.universalimageloader.core.assist.ImageScaleType $r2, $r11;
        com.nostra13.universalimageloader.core.assist.ViewScaleType $r3;
        android.graphics.Bitmap $r4, $r9;
        com.nostra13.universalimageloader.core.download.ImageDownloader $r5;
        java.net.URI $r6;
        android.graphics.BitmapFactory$Options $r7;
        java.io.InputStream $r8;
        java.lang.Throwable $r10;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $r1 := @parameter0: com.nostra13.universalimageloader.core.assist.ImageSize;

        $r2 := @parameter1: com.nostra13.universalimageloader.core.assist.ImageScaleType;

        $r3 := @parameter2: com.nostra13.universalimageloader.core.assist.ViewScaleType;

        $r7 = specialinvoke $r0.<com.nostra13.universalimageloader.core.ImageDecoder: android.graphics.BitmapFactory$Options getBitmapOptionsForImageDecoding(com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageScaleType,com.nostra13.universalimageloader.core.assist.ViewScaleType)>($r1, $r2, $r3);

        $r5 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: com.nostra13.universalimageloader.core.download.ImageDownloader imageDownloader>;

        $r6 = $r0.<com.nostra13.universalimageloader.core.ImageDecoder: java.net.URI imageUri>;

        $r8 = virtualinvoke $r5.<com.nostra13.universalimageloader.core.download.ImageDownloader: java.io.InputStream getStream(java.net.URI)>($r6);

     label1:
        $r9 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r8, null, $r7);

     label2:
        $r4 = $r9;

        virtualinvoke $r8.<java.io.InputStream: void close()>();

        if $r9 != null goto label4;

        return null;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r8.<java.io.InputStream: void close()>();

        throw $r10;

     label4:
        $r11 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY>;

        if $r2 == $r11 goto label5;

        $r11 = <com.nostra13.universalimageloader.core.assist.ImageScaleType: com.nostra13.universalimageloader.core.assist.ImageScaleType EXACTLY_STRETCHED>;

        if $r2 != $r11 goto label6;

     label5:
        $r4 = specialinvoke $r0.<com.nostra13.universalimageloader.core.ImageDecoder: android.graphics.Bitmap scaleImageExactly(android.graphics.Bitmap,com.nostra13.universalimageloader.core.assist.ImageSize,com.nostra13.universalimageloader.core.assist.ImageScaleType,com.nostra13.universalimageloader.core.assist.ViewScaleType)>($r9, $r1, $r2, $r3);

     label6:
        return $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setLoggingEnabled(boolean)
    {
        com.nostra13.universalimageloader.core.ImageDecoder $r0;
        boolean $z0;

        $r0 := @this: com.nostra13.universalimageloader.core.ImageDecoder;

        $z0 := @parameter0: boolean;

        $r0.<com.nostra13.universalimageloader.core.ImageDecoder: boolean loggingEnabled> = $z0;

        return;
    }

    public static void <clinit>()
    {
        <com.nostra13.universalimageloader.core.ImageDecoder: java.lang.String LOG_IMAGE_SUBSAMPLED> = "Original image (%1$dx%2$d) is going to be subsampled to %3$dx%4$d view. Computed scale size - %5$d";

        <com.nostra13.universalimageloader.core.ImageDecoder: java.lang.String LOG_IMAGE_SCALED> = "Subsampled image (%1$dx%2$d) was scaled to %3$dx%4$d";

        return;
    }
}
