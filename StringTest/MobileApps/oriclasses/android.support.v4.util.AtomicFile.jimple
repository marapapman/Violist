public class android.support.v4.util.AtomicFile extends java.lang.Object
{
    private final java.io.File mBackupName;
    private final java.io.File mBaseName;

    public void <init>(java.io.File)
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1, $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r1 := @parameter0: java.io.File;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName> = $r1;

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bak");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);

        $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName> = $r2;

        return;
    }

    static boolean sync(java.io.FileOutputStream)
    {
        java.io.FileOutputStream $r0;
        java.io.FileDescriptor $r1;
        java.io.IOException $r2;

        $r0 := @parameter0: java.io.FileOutputStream;

        if $r0 == null goto label2;

     label1:
        $r1 = virtualinvoke $r0.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke $r1.<java.io.FileDescriptor: void sync()>();

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void delete()
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;
    }

    public void failWrite(java.io.FileOutputStream)
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.FileOutputStream $r1;
        java.io.IOException $r2;
        java.io.File $r3, $r4;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r1 := @parameter0: java.io.FileOutputStream;

        if $r1 == null goto label6;

        staticinvoke <android.support.v4.util.AtomicFile: boolean sync(java.io.FileOutputStream)>($r1);

     label1:
        virtualinvoke $r1.<java.io.FileOutputStream: void close()>();

        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label2:
        $r4 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

     label3:
        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r4.<java.io.File: boolean renameTo(java.io.File)>($r3);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "failWrite: Got exception:", $r2);

        return;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public void finishWrite(java.io.FileOutputStream)
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.FileOutputStream $r1;
        java.io.IOException $r2;
        java.io.File $r3;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r1 := @parameter0: java.io.FileOutputStream;

        if $r1 == null goto label4;

        staticinvoke <android.support.v4.util.AtomicFile: boolean sync(java.io.FileOutputStream)>($r1);

     label1:
        virtualinvoke $r1.<java.io.FileOutputStream: void close()>();

        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "finishWrite: Got exception:", $r2);

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.io.File getBaseFile()
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File r1;

        $r0 := @this: android.support.v4.util.AtomicFile;

        r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        return r1;
    }

    public java.io.FileInputStream openRead() throws java.io.FileNotFoundException
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1, $r2;
        boolean $z0;
        java.io.FileInputStream $r3;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r2 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r2.<java.io.File: boolean renameTo(java.io.File)>($r1);

     label1:
        $r3 = new java.io.FileInputStream;

        $r2 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return $r3;
    }

    public byte[] readFully() throws java.io.IOException
    {
        android.support.v4.util.AtomicFile $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.io.FileInputStream $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r3 = virtualinvoke $r0.<android.support.v4.util.AtomicFile: java.io.FileInputStream openRead()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r3.<java.io.FileInputStream: int available()>();

        $r1 = newarray (byte)[$i1];

     label2:
        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        $i1 = virtualinvoke $r3.<java.io.FileInputStream: int read(byte[],int,int)>($r1, $i0, $i1);

     label3:
        if $i1 > 0 goto label4;

        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

        return $r1;

     label4:
        $i0 = $i0 + $i1;

     label5:
        $i1 = virtualinvoke $r3.<java.io.FileInputStream: int available()>();

        $i2 = lengthof $r1;

     label6:
        $i2 = $i2 - $i0;

     label7:
        if $i1 <= $i2 goto label2;

        $i2 = $i0 + $i1;

        $r2 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

     label8:
        $r1 = $r2;

        goto label2;

     label9:
        $r4 := @caughtexception;

        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public java.io.FileOutputStream startWrite() throws java.io.IOException
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.FileNotFoundException $r1, $r2;
        java.io.FileOutputStream $r3;
        java.io.File $r4, $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.io.IOException $r8;

        $r0 := @this: android.support.v4.util.AtomicFile;

        $r4 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label4;

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r4 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $z0 = virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t rename file ");

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup file ");

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AtomicFile", $r7);

     label1:
        $r3 = new java.io.FileOutputStream;

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

     label2:
        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

     label3:
        return $r3;

     label4:
        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        goto label1;

     label5:
        $r1 := @caughtexception;

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r5 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean mkdir()>();

        if $z0 != 0 goto label6;

        $r8 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create directory ");

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label6:
        $r3 = new java.io.FileOutputStream;

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

     label7:
        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

     label8:
        return $r3;

     label9:
        $r2 := @caughtexception;

        $r8 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create ");

        $r5 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r8;

        catch java.io.FileNotFoundException from label2 to label3 with label5;
        catch java.io.FileNotFoundException from label7 to label8 with label9;
    }
}
