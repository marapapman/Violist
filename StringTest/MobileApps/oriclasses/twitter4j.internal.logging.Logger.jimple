public abstract class twitter4j.internal.logging.Logger extends java.lang.Object
{
    private static final twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY;
    private static final java.lang.String LOGGER_FACTORY_IMPLEMENTATION;

    static void <clinit>()
    {
        twitter4j.internal.logging.LoggerFactory $r0;
        java.lang.String $r1;
        twitter4j.conf.Configuration $r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6;
        java.lang.NoSuchMethodException $r7;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.IllegalAccessException $r9;
        twitter4j.internal.logging.StdOutLoggerFactory r10;

        <twitter4j.internal.logging.Logger: java.lang.String LOGGER_FACTORY_IMPLEMENTATION> = "twitter4j.loggerFactory";

        $r0 = null;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("twitter4j.loggerFactory");

        if $r1 == null goto label01;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>($r1, $r1);

     label01:
        $r2 = staticinvoke <twitter4j.conf.ConfigurationContext: twitter4j.conf.Configuration getInstance()>();

        $r1 = interfaceinvoke $r2.<twitter4j.conf.Configuration: java.lang.String getLoggerFactory()>();

        if $r1 == null goto label02;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>($r1, $r1);

     label02:
        if $r0 != null goto label03;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("org.slf4j.impl.StaticLoggerBinder", "twitter4j.internal.logging.SLF4JLoggerFactory");

     label03:
        if $r0 != null goto label04;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("org.apache.commons.logging.Log", "twitter4j.internal.logging.CommonsLoggingLoggerFactory");

     label04:
        if $r0 != null goto label05;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("org.apache.log4j.Logger", "twitter4j.internal.logging.Log4JLoggerFactory");

     label05:
        if $r0 != null goto label06;

        $r0 = staticinvoke <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("com.google.appengine.api.urlfetch.URLFetchService", "twitter4j.internal.logging.JULLoggerFactory");

     label06:
        if $r0 != null goto label07;

        r10 = new twitter4j.internal.logging.StdOutLoggerFactory;

        $r0 = r10;

        specialinvoke r10.<twitter4j.internal.logging.StdOutLoggerFactory: void <init>()>();

     label07:
        <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY> = $r0;

     label08:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpConfiguration", $r4);

        virtualinvoke $r5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r6);

     label09:
        return;

     label10:
        $r7 := @caughtexception;

        return;

     label11:
        $r8 := @caughtexception;

        return;

     label12:
        $r9 := @caughtexception;

        return;

        catch java.lang.IllegalAccessException from label08 to label09 with label12;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label11;
        catch java.lang.NoSuchMethodException from label08 to label09 with label10;
    }

    public void <init>()
    {
        twitter4j.internal.logging.Logger $r0;

        $r0 := @this: twitter4j.internal.logging.Logger;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static twitter4j.internal.logging.Logger getLogger(java.lang.Class)
    {
        java.lang.Class $r0;
        twitter4j.internal.logging.LoggerFactory $r1;
        twitter4j.internal.logging.Logger $r2;

        $r0 := @parameter0: java.lang.Class;

        $r1 = <twitter4j.internal.logging.Logger: twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY>;

        $r2 = virtualinvoke $r1.<twitter4j.internal.logging.LoggerFactory: twitter4j.internal.logging.Logger getLogger(java.lang.Class)>($r0);

        return $r2;
    }

    private static twitter4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.InstantiationException $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        twitter4j.internal.logging.LoggerFactory $r5;
        java.lang.AssertionError $r6;
        java.lang.IllegalAccessException $r7;
        java.lang.SecurityException $r8;
        java.lang.ClassNotFoundException $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        $r5 = (twitter4j.internal.logging.LoggerFactory) $r4;

        return $r5;

     label3:
        $r2 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r6;

     label4:
        $r7 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r6;

     label5:
        $r8 := @caughtexception;

     label6:
        return null;

     label7:
        $r9 := @caughtexception;

        goto label6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label7;
        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public abstract void debug(java.lang.String);

    public abstract void debug(java.lang.String, java.lang.String);

    public abstract void error(java.lang.String);

    public abstract void error(java.lang.String, java.lang.Throwable);

    public abstract void info(java.lang.String);

    public abstract void info(java.lang.String, java.lang.String);

    public abstract boolean isDebugEnabled();

    public abstract boolean isErrorEnabled();

    public abstract boolean isInfoEnabled();

    public abstract boolean isWarnEnabled();

    public abstract void warn(java.lang.String);

    public abstract void warn(java.lang.String, java.lang.String);
}
